---
- name: Install Freeplane as this cannot be installed using the regular package manager on Fedora, Centos
  hosts: myhost

  vars:
    DLURL: "https://sourceforge.net/projects/freeplane/files/latest/download"
    RSSURL: "https://sourceforge.net/projects/freeplane/rss?path=/freeplane%20stable"
    LOCALPATH: "./freeplane_bin.zip"
    APPPATH: "/opt"
    DESKTOPPATH: "~/.local/share/applications"
    FPDESKTOP: "{{ DESKTOPPATH }}/freeplane.desktop"
    DESKTOPTEMPL: "j2/freeplane-desktop.j2"

  tasks:
    - name: Check current Freeplane version installed in {{ APPPATH }}
      find:
        path: "{{ APPPATH }}"
        file_type: directory
        pattern: "freeplane*"
      register: fp_test

    - name: Set Fact online freeplane version
      set_fact:
        latest: "{{ lookup('url', RSSURL) | regex_search('archive/([0-9]+\\.[0-9]+\\.[0-9]+)/freeplane', '\\1' ) }}"

    - name: Install Freeplane if it doesn't exist or there is a newer version
      block:
        - name: Download latest Freeplane ZIP file
          get_url:
            url: "{{ DLURL }}"
            dest: "{{ LOCALPATH }}"
            tmp_dest: /tmp
          notify: Cleanup

        - name: unzip freeplane
          unarchive:
            src: "{{ LOCALPATH }}"
            dest: "./"
          register: unarchive_result
          notify: Cleanup

        - name: Set fp_path fact
          set_fact:
            fp_path: "{{ unarchive_result['diff']['prepared'] | regex_search('(freeplane-[0-9]*.[0-9]*.[0-9]*/)') }}"

        - name: Move Freeplane to /opt if the downloaded version isn't already there
          command:
            cmd: "mv ./{{ fp_path }} {{ APPPATH }}/{{ fp_path }}"
            creates: "{{ APPPATH }}/{{ fp_path }}"
          register: mv_result

        - name: Ensure the Freeplane.sh file is executable
          file:
            path: "{{ APPPATH }}/{{ fp_path }}freeplane.sh"
            mode: '755'

        - name: Ensure an application icon is in Gnome Appplications for current user
          become: false
          template:
            src: "{{ DESKTOPTEMPL }}"
            dest: "{{ FPDESKTOP }}"
            mode: '664'
          notify: update database

        - name: Removing {{ fp_test['files'][0]['path'] }} directory if a new version was installed
          file:
            path: "{{ fp_test['files'][0]['path'] }}"
            state: absent
          when: mv_result.changed and fp_test['files'][0]['path'] is defined
      when: (fp_test['files'][0]['path'] is not defined) or (not latest[0] in fp_test['files'][0]['path'])

  handlers:
    - name: Cleanup
      file:
        path: "{{ item  }}"
        state: absent
      loop:
        - "./{{ fp_path }}"
        - "{{ LOCALPATH  }}"

    - name: update database
      become: false
      command: "update-desktop-database {{ DESKTOPPATH }}"
